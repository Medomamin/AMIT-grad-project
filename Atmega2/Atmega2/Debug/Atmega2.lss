
Atmega2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a54  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000424  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f6  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "DIO_config.h"

/*		Ip / op	*/
void DIO_voidSetPinDirection(u8 PORTID , u8 PINID , u8 Direction)
{
	if (Direction == OUTPUT)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_voidSetPinDirection+0x6c>
	{
		switch(PORTID)
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_voidSetPinDirection+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_voidSetPinDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_voidSetPinDirection+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_voidSetPinDirection+0x56>
  7e:	08 95       	ret
		{
			case PORTA : SET_BIT(DDRA_REG,PINID);	break;
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_voidSetPinDirection+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_voidSetPinDirection+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
			case PORTB : SET_BIT(DDRB_REG,PINID);	break;
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_voidSetPinDirection+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_voidSetPinDirection+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
			case PORTC : SET_BIT(DDRC_REG,PINID);	break;
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDirection+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
			case PORTD : SET_BIT(DDRD_REG,PINID);	break;
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDirection+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
		}
	}
	else if(Direction == INPUT)
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_voidSetPinDirection+0xde>
	{
				switch(PORTID)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_voidSetPinDirection+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_voidSetPinDirection+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_voidSetPinDirection+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_voidSetPinDirection+0xc8>
  ea:	08 95       	ret
				{
					case PORTA : CLR_BIT(DDRA_REG,PINID);	break;
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinDirection+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
					case PORTB : CLR_BIT(DDRB_REG,PINID);	break;
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_voidSetPinDirection+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_voidSetPinDirection+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
					case PORTC : CLR_BIT(DDRC_REG,PINID);	break;
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDirection+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDirection+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
					case PORTD : CLR_BIT(DDRD_REG,PINID);	break;
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <main>:
#include "DIO_private.h"
#include "Bit_Math.h"

int main(void)
{
	SPI_Slave_Init();
 14c:	0e 94 c8 00 	call	0x190	; 0x190 <SPI_Slave_Init>
	char master_data;
	DIO_voidSetPinDirection(PORTC,2,OUTPUT);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTC,3,OUTPUT);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	while (1)
	{
		master_data = SPI_TransRecieve(0);
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <SPI_TransRecieve>
		switch(master_data){
 16c:	99 27       	eor	r25, r25
 16e:	81 36       	cpi	r24, 0x61	; 97
 170:	91 05       	cpc	r25, r1
 172:	21 f0       	breq	.+8      	; 0x17c <main+0x30>
 174:	82 36       	cpi	r24, 0x62	; 98
 176:	91 05       	cpc	r25, r1
 178:	31 f0       	breq	.+12     	; 0x186 <main+0x3a>
 17a:	f4 cf       	rjmp	.-24     	; 0x164 <main+0x18>
			case 'a':
			TOG_BIT(PORTC_REG,2); break;
 17c:	95 b3       	in	r25, 0x15	; 21
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	89 27       	eor	r24, r25
 182:	85 bb       	out	0x15, r24	; 21
 184:	ef cf       	rjmp	.-34     	; 0x164 <main+0x18>
			case 'b':
			TOG_BIT(PORTC_REG,3); break;
 186:	95 b3       	in	r25, 0x15	; 21
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	89 27       	eor	r24, r25
 18c:	85 bb       	out	0x15, r24	; 21
 18e:	ea cf       	rjmp	.-44     	; 0x164 <main+0x18>

00000190 <SPI_Slave_Init>:
void SPI_Master_InitTrans(void){
	DIO_voidSetPinValue(PORTB,4,LOW);
}

void SPI_Master_TermTrans(void){
	DIO_voidSetPinValue(PORTB,4,HIGH);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 1b8:	8d b1       	in	r24, 0x0d	; 13
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	8d b9       	out	0x0d, r24	; 13
 1be:	08 95       	ret

000001c0 <SPI_TransRecieve>:
}


u8 SPI_TransRecieve(u8 data){
	u8 rec_data = 0;
	SPDR = data;
 1c0:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR,7)==0)
 1c2:	77 9b       	sbis	0x0e, 7	; 14
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <SPI_TransRecieve+0x2>
	{
	}
	rec_data = SPDR;
 1c6:	8f b1       	in	r24, 0x0f	; 15
	return rec_data;
}
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
