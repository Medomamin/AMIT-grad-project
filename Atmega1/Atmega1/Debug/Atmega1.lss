
Atmega1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c88  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000853  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fe  00000000  00000000  0000196b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d7  00000000  00000000  00002562  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  64:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "DIO_config.h"

/*		Ip / op	*/
void DIO_voidSetPinDirection(u8 PORTID , u8 PINID , u8 Direction)
{
	if (Direction == OUTPUT)
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <DIO_voidSetPinDirection+0x6c>
	{
		switch(PORTID)
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <DIO_voidSetPinDirection+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <DIO_voidSetPinDirection+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <DIO_voidSetPinDirection+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <DIO_voidSetPinDirection+0x56>
  7e:	08 95       	ret
		{
			case PORTA : SET_BIT(DDRA_REG,PINID);	break;
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <DIO_voidSetPinDirection+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <DIO_voidSetPinDirection+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
			case PORTB : SET_BIT(DDRB_REG,PINID);	break;
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_voidSetPinDirection+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_voidSetPinDirection+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
			case PORTC : SET_BIT(DDRC_REG,PINID);	break;
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDirection+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
			case PORTD : SET_BIT(DDRD_REG,PINID);	break;
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDirection+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDirection+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
		}
	}
	else if(Direction == INPUT)
  d8:	41 11       	cpse	r20, r1
  da:	37 c0       	rjmp	.+110    	; 0x14a <DIO_voidSetPinDirection+0xde>
	{
				switch(PORTID)
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	91 f0       	breq	.+36     	; 0x104 <DIO_voidSetPinDirection+0x98>
  e0:	28 f0       	brcs	.+10     	; 0xec <DIO_voidSetPinDirection+0x80>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	d9 f0       	breq	.+54     	; 0x11c <DIO_voidSetPinDirection+0xb0>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_voidSetPinDirection+0xc8>
  ea:	08 95       	ret
				{
					case PORTA : CLR_BIT(DDRA_REG,PINID);	break;
  ec:	2a b3       	in	r18, 0x1a	; 26
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_voidSetPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_voidSetPinDirection+0x88>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	8a bb       	out	0x1a, r24	; 26
 102:	08 95       	ret
					case PORTB : CLR_BIT(DDRB_REG,PINID);	break;
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_voidSetPinDirection+0xa4>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_voidSetPinDirection+0xa0>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
					case PORTC : CLR_BIT(DDRC_REG,PINID);	break;
 11c:	24 b3       	in	r18, 0x14	; 20
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_voidSetPinDirection+0xbc>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_voidSetPinDirection+0xb8>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
					case PORTD : CLR_BIT(DDRD_REG,PINID);	break;
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDirection+0xd0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <DIO_voidSetPinValue>:
	}
}
/*		OUT = High or Low		*/
void DIO_voidSetPinValue(u8 PORTID , u8 PINID , u8 Value)
{
	if (Value == HIGH)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	a1 f5       	brne	.+104    	; 0x1b8 <DIO_voidSetPinValue+0x6c>
	{
			switch(PORTID)
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	89 f0       	breq	.+34     	; 0x176 <DIO_voidSetPinValue+0x2a>
 154:	28 f0       	brcs	.+10     	; 0x160 <DIO_voidSetPinValue+0x14>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	c9 f0       	breq	.+50     	; 0x18c <DIO_voidSetPinValue+0x40>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	11 f1       	breq	.+68     	; 0x1a2 <DIO_voidSetPinValue+0x56>
 15e:	08 95       	ret
			{
				case PORTA : SET_BIT(PORTA_REG,PINID);	break;
 160:	2b b3       	in	r18, 0x1b	; 27
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_voidSetPinValue+0x20>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_voidSetPinValue+0x1c>
 170:	82 2b       	or	r24, r18
 172:	8b bb       	out	0x1b, r24	; 27
 174:	08 95       	ret
				case PORTB : SET_BIT(PORTB_REG,PINID);	break;
 176:	28 b3       	in	r18, 0x18	; 24
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_voidSetPinValue+0x36>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_voidSetPinValue+0x32>
 186:	82 2b       	or	r24, r18
 188:	88 bb       	out	0x18, r24	; 24
 18a:	08 95       	ret
				case PORTC : SET_BIT(PORTC_REG,PINID);	break;
 18c:	25 b3       	in	r18, 0x15	; 21
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinValue+0x4c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinValue+0x48>
 19c:	82 2b       	or	r24, r18
 19e:	85 bb       	out	0x15, r24	; 21
 1a0:	08 95       	ret
				case PORTD : SET_BIT(PORTD_REG,PINID);	break;
 1a2:	22 b3       	in	r18, 0x12	; 18
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_voidSetPinValue+0x62>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_voidSetPinValue+0x5e>
 1b2:	82 2b       	or	r24, r18
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	08 95       	ret
			}
	}else if (Value == LOW)
 1b8:	41 11       	cpse	r20, r1
 1ba:	37 c0       	rjmp	.+110    	; 0x22a <DIO_voidSetPinValue+0xde>
	{
			switch(PORTID)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	91 f0       	breq	.+36     	; 0x1e4 <DIO_voidSetPinValue+0x98>
 1c0:	28 f0       	brcs	.+10     	; 0x1cc <DIO_voidSetPinValue+0x80>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <DIO_voidSetPinValue+0xb0>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	29 f1       	breq	.+74     	; 0x214 <DIO_voidSetPinValue+0xc8>
 1ca:	08 95       	ret
			{
				case PORTA : CLR_BIT(PORTA_REG,PINID);	break;
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_voidSetPinValue+0x8c>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_voidSetPinValue+0x88>
 1dc:	80 95       	com	r24
 1de:	82 23       	and	r24, r18
 1e0:	8b bb       	out	0x1b, r24	; 27
 1e2:	08 95       	ret
				case PORTB : CLR_BIT(PORTB_REG,PINID);	break;
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0xa4>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0xa0>
 1f4:	80 95       	com	r24
 1f6:	82 23       	and	r24, r18
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	08 95       	ret
				case PORTC : CLR_BIT(PORTC_REG,PINID);	break;
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0xbc>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0xb8>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
				case PORTD : CLR_BIT(PORTD_REG,PINID);	break;
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0xd4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0xd0>
 224:	80 95       	com	r24
 226:	82 23       	and	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret

0000022c <main>:

#define F_CPU 16000000
int main(void)
{
	u8 bluetooth_data = 0;
	UART_Init();
 22c:	0e 94 5f 01 	call	0x2be	; 0x2be <UART_Init>
	SPI_Master_Init();
 230:	0e 94 37 01 	call	0x26e	; 0x26e <SPI_Master_Init>
	SPI_Master_InitTrans();
 234:	0e 94 54 01 	call	0x2a8	; 0x2a8 <SPI_Master_InitTrans>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f e3       	ldi	r18, 0x3F	; 63
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	93 e0       	ldi	r25, 0x03	; 3
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x12>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x1c>
 248:	00 00       	nop
	_delay_ms(1000);
	while (1)
	{
		bluetooth_data = UART_Rx();
 24a:	0e 94 75 01 	call	0x2ea	; 0x2ea <UART_Rx>
		if (bluetooth_data)
 24e:	88 23       	and	r24, r24
 250:	e1 f3       	breq	.-8      	; 0x24a <main+0x1e>
		{
			if (bluetooth_data == 'a')
 252:	81 36       	cpi	r24, 0x61	; 97
 254:	29 f4       	brne	.+10     	; 0x260 <main+0x34>
			{
				SPI_TransRecieve('a');
 256:	81 e6       	ldi	r24, 0x61	; 97
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <SPI_TransRecieve>
				bluetooth_data = 0;
 25e:	80 e0       	ldi	r24, 0x00	; 0
			}
			if (bluetooth_data == 'b')
 260:	82 36       	cpi	r24, 0x62	; 98
 262:	99 f7       	brne	.-26     	; 0x24a <main+0x1e>
			{
				SPI_TransRecieve('b');
 264:	82 e6       	ldi	r24, 0x62	; 98
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <SPI_TransRecieve>
 26c:	ee cf       	rjmp	.-36     	; 0x24a <main+0x1e>

0000026e <SPI_Master_Init>:
void SPI_Master_InitTrans(void){
	DIO_voidSetPinValue(PORTB,4,LOW);
}

void SPI_Master_TermTrans(void){
	DIO_voidSetPinValue(PORTB,4,HIGH);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	67 e0       	ldi	r22, 0x07	; 7
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	64 e0       	ldi	r22, 0x04	; 4
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 296:	8d b1       	in	r24, 0x0d	; 13
 298:	83 65       	ori	r24, 0x53	; 83
 29a:	8d b9       	out	0x0d, r24	; 13
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_voidSetPinValue>
 2a6:	08 95       	ret

000002a8 <SPI_Master_InitTrans>:
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 a6 00 	call	0x14c	; 0x14c <DIO_voidSetPinValue>
 2b2:	08 95       	ret

000002b4 <SPI_TransRecieve>:
}


u8 SPI_TransRecieve(u8 data){
	u8 rec_data = 0;
	SPDR = data;
 2b4:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR,7)==0)
 2b6:	77 9b       	sbis	0x0e, 7	; 14
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <SPI_TransRecieve+0x2>
	{
	}
	rec_data = SPDR;
 2ba:	8f b1       	in	r24, 0x0f	; 15
	return rec_data;
}
 2bc:	08 95       	ret

000002be <UART_Init>:
	while (str[i] != '\0')
	{
		UART_Tx(str[i]);
		i++;
	}
}
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
 2d2:	87 e6       	ldi	r24, 0x67	; 103
 2d4:	89 b9       	out	0x09, r24	; 9
 2d6:	8a b1       	in	r24, 0x0a	; 10
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	8a b9       	out	0x0a, r24	; 10
 2dc:	8a b1       	in	r24, 0x0a	; 10
 2de:	88 60       	ori	r24, 0x08	; 8
 2e0:	8a b9       	out	0x0a, r24	; 10
 2e2:	80 b5       	in	r24, 0x20	; 32
 2e4:	86 68       	ori	r24, 0x86	; 134
 2e6:	80 bd       	out	0x20, r24	; 32
 2e8:	08 95       	ret

000002ea <UART_Rx>:


u8 UART_Rx(void){
	u8 data = 0;
	while (GET_BIT(UCSRA,7)==0)
 2ea:	5f 9b       	sbis	0x0b, 7	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <UART_Rx>
	{
	}
	data = UDR;
 2ee:	8c b1       	in	r24, 0x0c	; 12
	return data;
}
 2f0:	08 95       	ret

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
